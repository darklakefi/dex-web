// @generated by protoc-gen-es v1.10.0
// @generated from file api.proto (package darklake.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum darklake.v1.Network
 */
export declare enum Network {
  /**
   * @generated from enum value: MAINNET_BETA = 0;
   */
  MAINNET_BETA = 0,

  /**
   * @generated from enum value: TESTNET = 1;
   */
  TESTNET = 1,

  /**
   * @generated from enum value: DEVNET = 2;
   */
  DEVNET = 2,
}

/**
 * @generated from enum darklake.v1.TradeStatus
 */
export declare enum TradeStatus {
  /**
   * @generated from enum value: UNSIGNED = 0;
   */
  UNSIGNED = 0,

  /**
   * @generated from enum value: SIGNED = 1;
   */
  SIGNED = 1,

  /**
   * @generated from enum value: CONFIRMED = 2;
   */
  CONFIRMED = 2,

  /**
   * @generated from enum value: SETTLED = 3;
   */
  SETTLED = 3,

  /**
   * @generated from enum value: SLASHED = 4;
   */
  SLASHED = 4,

  /**
   * @generated from enum value: CANCELLED = 5;
   */
  CANCELLED = 5,

  /**
   * @generated from enum value: FAILED = 6;
   */
  FAILED = 6,
}

/**
 * --------------------------------- MESSAGES
 *
 * @generated from message darklake.v1.TokenMetadata
 */
export declare class TokenMetadata extends Message<TokenMetadata> {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string symbol = 2;
   */
  symbol: string;

  /**
   * @generated from field: uint32 decimals = 3;
   */
  decimals: number;

  /**
   * @generated from field: string logo_uri = 4;
   */
  logoUri: string;

  /**
   * @generated from field: string address = 5;
   */
  address: string;

  constructor(data?: PartialMessage<TokenMetadata>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "darklake.v1.TokenMetadata";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TokenMetadata;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TokenMetadata;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TokenMetadata;

  static equals(a: TokenMetadata | PlainMessage<TokenMetadata> | undefined, b: TokenMetadata | PlainMessage<TokenMetadata> | undefined): boolean;
}

/**
 * @generated from message darklake.v1.Trade
 */
export declare class Trade extends Message<Trade> {
  /**
   * @generated from field: string trade_id = 1;
   */
  tradeId: string;

  /**
   * @generated from field: string order_id = 2;
   */
  orderId: string;

  /**
   * @generated from field: string user_address = 3;
   */
  userAddress: string;

  /**
   * @generated from field: darklake.v1.TokenMetadata token_x = 4;
   */
  tokenX?: TokenMetadata;

  /**
   * @generated from field: darklake.v1.TokenMetadata token_y = 5;
   */
  tokenY?: TokenMetadata;

  /**
   * @generated from field: uint64 amount_in = 6;
   */
  amountIn: bigint;

  /**
   * @generated from field: uint64 minimal_amount_out = 7;
   */
  minimalAmountOut: bigint;

  /**
   * @generated from field: darklake.v1.TradeStatus status = 8;
   */
  status: TradeStatus;

  /**
   * @generated from field: string signature = 9;
   */
  signature: string;

  /**
   * @generated from field: int64 created_at = 10;
   */
  createdAt: bigint;

  /**
   * @generated from field: int64 updated_at = 11;
   */
  updatedAt: bigint;

  /**
   * @generated from field: bool is_swap_x_to_y = 12;
   */
  isSwapXToY: boolean;

  constructor(data?: PartialMessage<Trade>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "darklake.v1.Trade";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Trade;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Trade;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Trade;

  static equals(a: Trade | PlainMessage<Trade> | undefined, b: Trade | PlainMessage<Trade> | undefined): boolean;
}

/**
 * @generated from message darklake.v1.QuoteRequest
 */
export declare class QuoteRequest extends Message<QuoteRequest> {
  /**
   * @generated from field: string token_mint_x = 1;
   */
  tokenMintX: string;

  /**
   * @generated from field: string token_mint_y = 2;
   */
  tokenMintY: string;

  /**
   * @generated from field: uint64 amount_in = 3;
   */
  amountIn: bigint;

  /**
   * @generated from field: bool is_swap_x_to_y = 4;
   */
  isSwapXToY: boolean;

  constructor(data?: PartialMessage<QuoteRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "darklake.v1.QuoteRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuoteRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuoteRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuoteRequest;

  static equals(a: QuoteRequest | PlainMessage<QuoteRequest> | undefined, b: QuoteRequest | PlainMessage<QuoteRequest> | undefined): boolean;
}

/**
 * @generated from message darklake.v1.QuoteResponse
 */
export declare class QuoteResponse extends Message<QuoteResponse> {
  /**
   * @generated from field: string token_mint_x = 1;
   */
  tokenMintX: string;

  /**
   * @generated from field: string token_mint_y = 2;
   */
  tokenMintY: string;

  /**
   * @generated from field: bool is_swap_x_to_y = 3;
   */
  isSwapXToY: boolean;

  /**
   * @generated from field: uint64 amount_in = 4;
   */
  amountIn: bigint;

  /**
   * @generated from field: uint64 amount_out = 5;
   */
  amountOut: bigint;

  /**
   * @generated from field: uint64 fee_amount = 6;
   */
  feeAmount: bigint;

  /**
   * @generated from field: double fee_pct = 7;
   */
  feePct: number;

  constructor(data?: PartialMessage<QuoteResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "darklake.v1.QuoteResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuoteResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuoteResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuoteResponse;

  static equals(a: QuoteResponse | PlainMessage<QuoteResponse> | undefined, b: QuoteResponse | PlainMessage<QuoteResponse> | undefined): boolean;
}

/**
 * @generated from message darklake.v1.CreateUnsignedTransactionRequest
 */
export declare class CreateUnsignedTransactionRequest extends Message<CreateUnsignedTransactionRequest> {
  /**
   * @generated from field: string user_address = 1;
   */
  userAddress: string;

  /**
   * @generated from field: string token_mint_x = 2;
   */
  tokenMintX: string;

  /**
   * @generated from field: string token_mint_y = 3;
   */
  tokenMintY: string;

  /**
   * @generated from field: uint64 amount_in = 4;
   */
  amountIn: bigint;

  /**
   * @generated from field: uint64 min_out = 5;
   */
  minOut: bigint;

  /**
   * @generated from field: string tracking_id = 6;
   */
  trackingId: string;

  /**
   * @generated from field: bool is_swap_x_to_y = 7;
   */
  isSwapXToY: boolean;

  /**
   * @generated from field: string ref_code = 8;
   */
  refCode: string;

  /**
   * @generated from field: string label = 9;
   */
  label: string;

  constructor(data?: PartialMessage<CreateUnsignedTransactionRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "darklake.v1.CreateUnsignedTransactionRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUnsignedTransactionRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUnsignedTransactionRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUnsignedTransactionRequest;

  static equals(a: CreateUnsignedTransactionRequest | PlainMessage<CreateUnsignedTransactionRequest> | undefined, b: CreateUnsignedTransactionRequest | PlainMessage<CreateUnsignedTransactionRequest> | undefined): boolean;
}

/**
 * @generated from message darklake.v1.CreateUnsignedTransactionResponse
 */
export declare class CreateUnsignedTransactionResponse extends Message<CreateUnsignedTransactionResponse> {
  /**
   * Base64 encoded transaction
   *
   * @generated from field: string unsigned_transaction = 1;
   */
  unsignedTransaction: string;

  /**
   * @generated from field: string order_id = 2;
   */
  orderId: string;

  /**
   * @generated from field: string trade_id = 3;
   */
  tradeId: string;

  constructor(data?: PartialMessage<CreateUnsignedTransactionResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "darklake.v1.CreateUnsignedTransactionResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUnsignedTransactionResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUnsignedTransactionResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUnsignedTransactionResponse;

  static equals(a: CreateUnsignedTransactionResponse | PlainMessage<CreateUnsignedTransactionResponse> | undefined, b: CreateUnsignedTransactionResponse | PlainMessage<CreateUnsignedTransactionResponse> | undefined): boolean;
}

/**
 * @generated from message darklake.v1.SendSignedTransactionRequest
 */
export declare class SendSignedTransactionRequest extends Message<SendSignedTransactionRequest> {
  /**
   * @generated from field: string signed_transaction = 1;
   */
  signedTransaction: string;

  /**
   * @generated from field: string tracking_id = 2;
   */
  trackingId: string;

  /**
   * @generated from field: string trade_id = 3;
   */
  tradeId: string;

  constructor(data?: PartialMessage<SendSignedTransactionRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "darklake.v1.SendSignedTransactionRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendSignedTransactionRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendSignedTransactionRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendSignedTransactionRequest;

  static equals(a: SendSignedTransactionRequest | PlainMessage<SendSignedTransactionRequest> | undefined, b: SendSignedTransactionRequest | PlainMessage<SendSignedTransactionRequest> | undefined): boolean;
}

/**
 * @generated from message darklake.v1.SendSignedTransactionResponse
 */
export declare class SendSignedTransactionResponse extends Message<SendSignedTransactionResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string trade_id = 2;
   */
  tradeId: string;

  /**
   * @generated from field: repeated string error_logs = 3;
   */
  errorLogs: string[];

  constructor(data?: PartialMessage<SendSignedTransactionResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "darklake.v1.SendSignedTransactionResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendSignedTransactionResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendSignedTransactionResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendSignedTransactionResponse;

  static equals(a: SendSignedTransactionResponse | PlainMessage<SendSignedTransactionResponse> | undefined, b: SendSignedTransactionResponse | PlainMessage<SendSignedTransactionResponse> | undefined): boolean;
}

/**
 * @generated from message darklake.v1.CheckTradeStatusRequest
 */
export declare class CheckTradeStatusRequest extends Message<CheckTradeStatusRequest> {
  /**
   * @generated from field: string tracking_id = 1;
   */
  trackingId: string;

  /**
   * @generated from field: string trade_id = 2;
   */
  tradeId: string;

  constructor(data?: PartialMessage<CheckTradeStatusRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "darklake.v1.CheckTradeStatusRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckTradeStatusRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckTradeStatusRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckTradeStatusRequest;

  static equals(a: CheckTradeStatusRequest | PlainMessage<CheckTradeStatusRequest> | undefined, b: CheckTradeStatusRequest | PlainMessage<CheckTradeStatusRequest> | undefined): boolean;
}

/**
 * @generated from message darklake.v1.CheckTradeStatusResponse
 */
export declare class CheckTradeStatusResponse extends Message<CheckTradeStatusResponse> {
  /**
   * @generated from field: string trade_id = 1;
   */
  tradeId: string;

  /**
   * @generated from field: darklake.v1.TradeStatus status = 2;
   */
  status: TradeStatus;

  constructor(data?: PartialMessage<CheckTradeStatusResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "darklake.v1.CheckTradeStatusResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckTradeStatusResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckTradeStatusResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckTradeStatusResponse;

  static equals(a: CheckTradeStatusResponse | PlainMessage<CheckTradeStatusResponse> | undefined, b: CheckTradeStatusResponse | PlainMessage<CheckTradeStatusResponse> | undefined): boolean;
}

/**
 * @generated from message darklake.v1.GetTradesListByUserRequest
 */
export declare class GetTradesListByUserRequest extends Message<GetTradesListByUserRequest> {
  /**
   * @generated from field: string user_address = 1;
   */
  userAddress: string;

  /**
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * @generated from field: int32 page_number = 3;
   */
  pageNumber: number;

  constructor(data?: PartialMessage<GetTradesListByUserRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "darklake.v1.GetTradesListByUserRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTradesListByUserRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTradesListByUserRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTradesListByUserRequest;

  static equals(a: GetTradesListByUserRequest | PlainMessage<GetTradesListByUserRequest> | undefined, b: GetTradesListByUserRequest | PlainMessage<GetTradesListByUserRequest> | undefined): boolean;
}

/**
 * @generated from message darklake.v1.GetTradesListByUserResponse
 */
export declare class GetTradesListByUserResponse extends Message<GetTradesListByUserResponse> {
  /**
   * @generated from field: repeated darklake.v1.Trade trades = 1;
   */
  trades: Trade[];

  /**
   * @generated from field: int32 total_pages = 2;
   */
  totalPages: number;

  /**
   * @generated from field: int32 current_page = 3;
   */
  currentPage: number;

  constructor(data?: PartialMessage<GetTradesListByUserResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "darklake.v1.GetTradesListByUserResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTradesListByUserResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTradesListByUserResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTradesListByUserResponse;

  static equals(a: GetTradesListByUserResponse | PlainMessage<GetTradesListByUserResponse> | undefined, b: GetTradesListByUserResponse | PlainMessage<GetTradesListByUserResponse> | undefined): boolean;
}

/**
 * @generated from message darklake.v1.GetTokenMetadataRequest
 */
export declare class GetTokenMetadataRequest extends Message<GetTokenMetadataRequest> {
  /**
   * @generated from oneof darklake.v1.GetTokenMetadataRequest.search_by
   */
  searchBy: {
    /**
     * @generated from field: string token_address = 1;
     */
    value: string;
    case: "tokenAddress";
  } | {
    /**
     * @generated from field: string token_symbol = 2;
     */
    value: string;
    case: "tokenSymbol";
  } | {
    /**
     * @generated from field: string token_name = 3;
     */
    value: string;
    case: "tokenName";
  } | {
    /**
     * @generated from field: string substring = 4;
     */
    value: string;
    case: "substring";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<GetTokenMetadataRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "darklake.v1.GetTokenMetadataRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTokenMetadataRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTokenMetadataRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTokenMetadataRequest;

  static equals(a: GetTokenMetadataRequest | PlainMessage<GetTokenMetadataRequest> | undefined, b: GetTokenMetadataRequest | PlainMessage<GetTokenMetadataRequest> | undefined): boolean;
}

/**
 * @generated from message darklake.v1.GetTokenMetadataResponse
 */
export declare class GetTokenMetadataResponse extends Message<GetTokenMetadataResponse> {
  /**
   * @generated from field: darklake.v1.TokenMetadata token_metadata = 1;
   */
  tokenMetadata?: TokenMetadata;

  constructor(data?: PartialMessage<GetTokenMetadataResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "darklake.v1.GetTokenMetadataResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTokenMetadataResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTokenMetadataResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTokenMetadataResponse;

  static equals(a: GetTokenMetadataResponse | PlainMessage<GetTokenMetadataResponse> | undefined, b: GetTokenMetadataResponse | PlainMessage<GetTokenMetadataResponse> | undefined): boolean;
}

/**
 * @generated from message darklake.v1.TokenAddressesList
 */
export declare class TokenAddressesList extends Message<TokenAddressesList> {
  /**
   * @generated from field: repeated string token_addresses = 1;
   */
  tokenAddresses: string[];

  constructor(data?: PartialMessage<TokenAddressesList>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "darklake.v1.TokenAddressesList";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TokenAddressesList;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TokenAddressesList;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TokenAddressesList;

  static equals(a: TokenAddressesList | PlainMessage<TokenAddressesList> | undefined, b: TokenAddressesList | PlainMessage<TokenAddressesList> | undefined): boolean;
}

/**
 * @generated from message darklake.v1.TokenSymbolsList
 */
export declare class TokenSymbolsList extends Message<TokenSymbolsList> {
  /**
   * @generated from field: repeated string token_symbols = 1;
   */
  tokenSymbols: string[];

  constructor(data?: PartialMessage<TokenSymbolsList>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "darklake.v1.TokenSymbolsList";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TokenSymbolsList;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TokenSymbolsList;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TokenSymbolsList;

  static equals(a: TokenSymbolsList | PlainMessage<TokenSymbolsList> | undefined, b: TokenSymbolsList | PlainMessage<TokenSymbolsList> | undefined): boolean;
}

/**
 * @generated from message darklake.v1.TokenNamesList
 */
export declare class TokenNamesList extends Message<TokenNamesList> {
  /**
   * @generated from field: repeated string token_names = 1;
   */
  tokenNames: string[];

  constructor(data?: PartialMessage<TokenNamesList>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "darklake.v1.TokenNamesList";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TokenNamesList;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TokenNamesList;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TokenNamesList;

  static equals(a: TokenNamesList | PlainMessage<TokenNamesList> | undefined, b: TokenNamesList | PlainMessage<TokenNamesList> | undefined): boolean;
}

/**
 * @generated from message darklake.v1.GetTokenMetadataListRequest
 */
export declare class GetTokenMetadataListRequest extends Message<GetTokenMetadataListRequest> {
  /**
   * @generated from oneof darklake.v1.GetTokenMetadataListRequest.filter_by
   */
  filterBy: {
    /**
     * @generated from field: darklake.v1.TokenAddressesList addresses_list = 1;
     */
    value: TokenAddressesList;
    case: "addressesList";
  } | {
    /**
     * @generated from field: darklake.v1.TokenSymbolsList symbols_list = 2;
     */
    value: TokenSymbolsList;
    case: "symbolsList";
  } | {
    /**
     * @generated from field: darklake.v1.TokenNamesList names_list = 3;
     */
    value: TokenNamesList;
    case: "namesList";
  } | {
    /**
     * @generated from field: string substring = 6;
     */
    value: string;
    case: "substring";
  } | { case: undefined; value?: undefined };

  /**
   * @generated from field: int32 page_size = 4;
   */
  pageSize: number;

  /**
   * @generated from field: int32 page_number = 5;
   */
  pageNumber: number;

  constructor(data?: PartialMessage<GetTokenMetadataListRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "darklake.v1.GetTokenMetadataListRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTokenMetadataListRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTokenMetadataListRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTokenMetadataListRequest;

  static equals(a: GetTokenMetadataListRequest | PlainMessage<GetTokenMetadataListRequest> | undefined, b: GetTokenMetadataListRequest | PlainMessage<GetTokenMetadataListRequest> | undefined): boolean;
}

/**
 * @generated from message darklake.v1.GetTokenMetadataListResponse
 */
export declare class GetTokenMetadataListResponse extends Message<GetTokenMetadataListResponse> {
  /**
   * @generated from field: repeated darklake.v1.TokenMetadata tokens = 1;
   */
  tokens: TokenMetadata[];

  /**
   * @generated from field: int32 total_pages = 2;
   */
  totalPages: number;

  /**
   * @generated from field: int32 current_page = 3;
   */
  currentPage: number;

  constructor(data?: PartialMessage<GetTokenMetadataListResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "darklake.v1.GetTokenMetadataListResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTokenMetadataListResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTokenMetadataListResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTokenMetadataListResponse;

  static equals(a: GetTokenMetadataListResponse | PlainMessage<GetTokenMetadataListResponse> | undefined, b: GetTokenMetadataListResponse | PlainMessage<GetTokenMetadataListResponse> | undefined): boolean;
}

/**
 * Custom Token Management Messages
 *
 * @generated from message darklake.v1.CreateCustomTokenRequest
 */
export declare class CreateCustomTokenRequest extends Message<CreateCustomTokenRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string symbol = 2;
   */
  symbol: string;

  /**
   * @generated from field: uint32 decimals = 3;
   */
  decimals: number;

  /**
   * @generated from field: string logo_uri = 4;
   */
  logoUri: string;

  /**
   * @generated from field: string address = 5;
   */
  address: string;

  constructor(data?: PartialMessage<CreateCustomTokenRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "darklake.v1.CreateCustomTokenRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCustomTokenRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCustomTokenRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateCustomTokenRequest;

  static equals(a: CreateCustomTokenRequest | PlainMessage<CreateCustomTokenRequest> | undefined, b: CreateCustomTokenRequest | PlainMessage<CreateCustomTokenRequest> | undefined): boolean;
}

/**
 * @generated from message darklake.v1.CreateCustomTokenResponse
 */
export declare class CreateCustomTokenResponse extends Message<CreateCustomTokenResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * @generated from field: darklake.v1.TokenMetadata token_metadata = 3;
   */
  tokenMetadata?: TokenMetadata;

  constructor(data?: PartialMessage<CreateCustomTokenResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "darklake.v1.CreateCustomTokenResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCustomTokenResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCustomTokenResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateCustomTokenResponse;

  static equals(a: CreateCustomTokenResponse | PlainMessage<CreateCustomTokenResponse> | undefined, b: CreateCustomTokenResponse | PlainMessage<CreateCustomTokenResponse> | undefined): boolean;
}

/**
 * @generated from message darklake.v1.EditCustomTokenRequest
 */
export declare class EditCustomTokenRequest extends Message<EditCustomTokenRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string symbol = 3;
   */
  symbol: string;

  /**
   * @generated from field: uint32 decimals = 4;
   */
  decimals: number;

  /**
   * @generated from field: string logo_uri = 5;
   */
  logoUri: string;

  constructor(data?: PartialMessage<EditCustomTokenRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "darklake.v1.EditCustomTokenRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EditCustomTokenRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EditCustomTokenRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EditCustomTokenRequest;

  static equals(a: EditCustomTokenRequest | PlainMessage<EditCustomTokenRequest> | undefined, b: EditCustomTokenRequest | PlainMessage<EditCustomTokenRequest> | undefined): boolean;
}

/**
 * @generated from message darklake.v1.EditCustomTokenResponse
 */
export declare class EditCustomTokenResponse extends Message<EditCustomTokenResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * @generated from field: darklake.v1.TokenMetadata token_metadata = 3;
   */
  tokenMetadata?: TokenMetadata;

  constructor(data?: PartialMessage<EditCustomTokenResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "darklake.v1.EditCustomTokenResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EditCustomTokenResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EditCustomTokenResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EditCustomTokenResponse;

  static equals(a: EditCustomTokenResponse | PlainMessage<EditCustomTokenResponse> | undefined, b: EditCustomTokenResponse | PlainMessage<EditCustomTokenResponse> | undefined): boolean;
}

/**
 * @generated from message darklake.v1.DeleteCustomTokenRequest
 */
export declare class DeleteCustomTokenRequest extends Message<DeleteCustomTokenRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address: string;

  constructor(data?: PartialMessage<DeleteCustomTokenRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "darklake.v1.DeleteCustomTokenRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteCustomTokenRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteCustomTokenRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteCustomTokenRequest;

  static equals(a: DeleteCustomTokenRequest | PlainMessage<DeleteCustomTokenRequest> | undefined, b: DeleteCustomTokenRequest | PlainMessage<DeleteCustomTokenRequest> | undefined): boolean;
}

/**
 * @generated from message darklake.v1.DeleteCustomTokenResponse
 */
export declare class DeleteCustomTokenResponse extends Message<DeleteCustomTokenResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  constructor(data?: PartialMessage<DeleteCustomTokenResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "darklake.v1.DeleteCustomTokenResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteCustomTokenResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteCustomTokenResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteCustomTokenResponse;

  static equals(a: DeleteCustomTokenResponse | PlainMessage<DeleteCustomTokenResponse> | undefined, b: DeleteCustomTokenResponse | PlainMessage<DeleteCustomTokenResponse> | undefined): boolean;
}

/**
 * @generated from message darklake.v1.GetCustomTokensRequest
 */
export declare class GetCustomTokensRequest extends Message<GetCustomTokensRequest> {
  constructor(data?: PartialMessage<GetCustomTokensRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "darklake.v1.GetCustomTokensRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCustomTokensRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCustomTokensRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCustomTokensRequest;

  static equals(a: GetCustomTokensRequest | PlainMessage<GetCustomTokensRequest> | undefined, b: GetCustomTokensRequest | PlainMessage<GetCustomTokensRequest> | undefined): boolean;
}

/**
 * @generated from message darklake.v1.GetCustomTokensResponse
 */
export declare class GetCustomTokensResponse extends Message<GetCustomTokensResponse> {
  /**
   * @generated from field: repeated darklake.v1.TokenMetadata tokens = 1;
   */
  tokens: TokenMetadata[];

  constructor(data?: PartialMessage<GetCustomTokensResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "darklake.v1.GetCustomTokensResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCustomTokensResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCustomTokensResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCustomTokensResponse;

  static equals(a: GetCustomTokensResponse | PlainMessage<GetCustomTokensResponse> | undefined, b: GetCustomTokensResponse | PlainMessage<GetCustomTokensResponse> | undefined): boolean;
}

/**
 * @generated from message darklake.v1.GetCustomTokenRequest
 */
export declare class GetCustomTokenRequest extends Message<GetCustomTokenRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address: string;

  constructor(data?: PartialMessage<GetCustomTokenRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "darklake.v1.GetCustomTokenRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCustomTokenRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCustomTokenRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCustomTokenRequest;

  static equals(a: GetCustomTokenRequest | PlainMessage<GetCustomTokenRequest> | undefined, b: GetCustomTokenRequest | PlainMessage<GetCustomTokenRequest> | undefined): boolean;
}

/**
 * @generated from message darklake.v1.GetCustomTokenResponse
 */
export declare class GetCustomTokenResponse extends Message<GetCustomTokenResponse> {
  /**
   * @generated from field: darklake.v1.TokenMetadata token_metadata = 1;
   */
  tokenMetadata?: TokenMetadata;

  constructor(data?: PartialMessage<GetCustomTokenResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "darklake.v1.GetCustomTokenResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCustomTokenResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCustomTokenResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCustomTokenResponse;

  static equals(a: GetCustomTokenResponse | PlainMessage<GetCustomTokenResponse> | undefined, b: GetCustomTokenResponse | PlainMessage<GetCustomTokenResponse> | undefined): boolean;
}

