version: 2.1

orbs:
  nx: nrwl/nx@1.7.0

commands:
  restore-nx-cache:
    description: "Restore Nx cache with enhanced fallback"
    steps:
      - restore_cache:
          name: Restore Nx Cache
          keys:
            - nx-cache-{{ .Branch }}-{{ .Revision }}-{{ checksum "nx.json" }}-{{ checksum "package.json" }}
            - nx-cache-{{ .Branch }}-{{ checksum "nx.json" }}-{{ checksum "package.json" }}
            - nx-cache-{{ .Branch }}-{{ checksum "nx.json" }}
            - nx-cache-{{ .Branch }}-
            - nx-cache-

  setup-nx:
    description: "Set up Nx SHAs for affected detection"
    steps:
      - nx/set-shas:
          main-branch-name: "develop"

  save-nx-cache:
    description: "Save Nx cache with revision-specific key"
    steps:
      - save_cache:
          name: Save Nx Cache
          key: nx-cache-{{ .Branch }}-{{ .Revision }}-{{ checksum "nx.json" }}-{{ checksum "package.json" }}
          paths:
            - .nx/cache
            - node_modules/.cache/nx

  restore-vercel-cache:
    description: "Restore Vercel build cache"
    steps:
      - restore_cache:
          name: Restore Vercel Cache
          keys:
            - vercel-cache-{{ .Branch }}-{{ checksum "pnpm-lock.yaml" }}-{{ checksum "apps/web/next.config.ts" }}
            - vercel-cache-{{ .Branch }}-{{ checksum "pnpm-lock.yaml" }}
            - vercel-cache-{{ .Branch }}-

  save-vercel-cache:
    description: "Save Vercel build cache"
    steps:
      - save_cache:
          name: Save Vercel Cache
          key: vercel-cache-{{ .Branch }}-{{ checksum "pnpm-lock.yaml" }}-{{ checksum "apps/web/next.config.ts" }}
          paths:
            - .vercel
            - .next/cache

  setup:
    description: "Common setup steps for all jobs"
    steps:
      - restore_cache:
          name: Restore Global NPM Cache
          keys:
            - global-npm-cache-{{ checksum ".circleci/config.yml" }}

      - restore_cache:
          name: Restore pnpm Package Cache
          keys:
            - pnpm-packages-{{ checksum "pnpm-lock.yaml" }}
            - pnpm-packages-{{ .Branch }}-
            - pnpm-packages-

      - run:
          name: Install pnpm package manager
          command: |
            if ! command -v pnpm &> /dev/null; then
              npm install --global corepack@latest
              corepack enable
              corepack prepare pnpm@latest-10 --activate
            fi
            pnpm config set store-dir ~/.pnpm-store

      - save_cache:
          name: Save Global NPM Cache
          key: global-npm-cache-{{ checksum ".circleci/config.yml" }}
          paths:
            - /usr/local/lib/node_modules
            - /usr/local/share/.config/yarn
            - /usr/local/share/corepack
            - ~/.npm

      - run:
          name: Install Dependencies
          command: pnpm install --frozen-lockfile

      - save_cache:
          name: Save pnpm Package Cache
          key: pnpm-packages-{{ checksum "pnpm-lock.yaml" }}
          paths:
            - ~/.pnpm-store
            - node_modules
            - apps/*/node_modules
            - libs/*/node_modules

jobs:
  check:
    docker:
      - image: mcr.microsoft.com/playwright:v1.53.0-noble
    resource_class: medium
    steps:
      - checkout
      - setup
      - setup-nx
      - restore-nx-cache
      - run:
          name: Run affected tasks
          command: pnpm exec nx affected --base=$NX_BASE --head=$NX_HEAD -t lint:ci,typecheck
      - save-nx-cache

  test:
    docker:
      - image: mcr.microsoft.com/playwright:v1.53.0-noble
    resource_class: large
    parallelism: 4
    steps:
      - checkout
      - setup
      - setup-nx
      - restore-nx-cache
      - run:
          name: Run affected tests in parallel
          command: |
            pnpm exec nx affected --base=$NX_BASE --head=$NX_HEAD \
              --target=test --parallel --maxParallel=${CIRCLE_NODE_TOTAL}
      - save-nx-cache
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
          destination: playwright-results

  chromatic:
    docker:
      - image: cimg/node:lts
    resource_class: medium
    environment:
      CI: true
    steps:
      - checkout
      - setup
      - setup-nx
      - restore-nx-cache
      - run:
          name: Build Storybook for Chromatic
          command: pnpm exec nx build-storybook ui --stats-json=storybook-static
      - run:
          name: Run Chromatic
          command: cd libs/ui && npx chromatic
      - save-nx-cache

  deploy-preview:
    docker:
      - image: cimg/base:stable
    resource_class: small
    steps:
      - checkout
      - setup
      - restore-vercel-cache
      - run:
          name: Pull Vercel Environment Information
          command: npx vercel@latest pull --yes --environment=preview --token=$VERCEL_TOKEN
      - run:
          name: Build Project
          command: npx vercel@latest build --token=$VERCEL_TOKEN
      - run:
          name: Deploy Project Artifacts to Vercel
          command: |
            VERCEL_URL=$(npx vercel@latest deploy --token=$VERCEL_TOKEN)
            if [[ ! "$VERCEL_URL" =~ ^https?:// ]]; then
              echo "Invalid Vercel URL received: $VERCEL_URL"
              exit 1
            fi
            echo "export VERCEL_URL=$VERCEL_URL" >> $BASH_ENV
      - run:
          name: Create GitHub Deployment & Status
          command: ./scripts/create-github-deployment.sh preview

  deploy-production:
    docker:
      - image: cimg/base:stable
    resource_class: medium
    steps:
      - checkout
      - setup
      - restore-vercel-cache
      - run:
          name: Plan production deployment
          command: circleci run release plan --target-version=production-$CIRCLE_SHA1 --environment-name=production --component-name=dex-web
      - run:
          name: Update deployment status to running
          command: circleci run release update --status=running
      - run:
          name: Pull Vercel Environment Information
          command: npx vercel@latest pull --yes --environment=production --token=$VERCEL_TOKEN
      - run:
          name: Build Project
          command: npx vercel@latest build --prod --token=$VERCEL_TOKEN
      - run:
          name: Deploy Project Artifacts to Vercel
          command: npx vercel@latest deploy --prod --token=$VERCEL_TOKEN
      - run:
          name: Create GitHub Production Deployment
          command: ./scripts/create-github-deployment.sh production
      - run:
          name: Update deployment status to SUCCESS
          command: circleci run release update --status=SUCCESS
          when: on_success
      - run:
          name: Update deployment status to FAILED
          command: circleci run release update --status=FAILED
          when: on_fail
      - save-vercel-cache

workflows:
  ci-cd:
    jobs:
      - check
      - test
      - chromatic
      - deploy-preview:
          requires:
            - check
            - test
          filters:
            branches:
              ignore: /main/
      - deploy-production:
          requires:
            - check
            - test
            - chromatic
          filters:
            branches:
              only: /main/
