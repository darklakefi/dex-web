version: 2.1

orbs:
  nx: nrwl/nx@1.7.0

commands:
  restore-nx-cache:
    description: "Restore Nx cache with enhanced fallback"
    steps:
      - restore_cache:
          name: Restore Nx Cache
          keys:
            - nx-cache-v2-{{ .Branch }}-{{ .Revision }}
            - nx-cache-v2-{{ .Branch }}-
            - nx-cache-v2-

  setup-nx:
    description: "Set up Nx SHAs for affected detection"
    steps:
      - nx/set-shas:
          main-branch-name: "develop"

  save-nx-cache:
    description: "Save Nx cache with revision-specific key"
    steps:
      - save_cache:
          name: Save Nx Cache
          key: nx-cache-v2-{{ .Branch }}-{{ .Revision }}
          paths:
            - .nx/cache

  restore-vercel-cache:
    description: "Restore Vercel build cache"
    steps:
      - restore_cache:
          name: Restore Vercel Cache
          keys:
            - vercel-cache-v2-{{ .Branch }}-{{ checksum "pnpm-lock.yaml" }}
            - vercel-cache-v2-{{ .Branch }}-
            - vercel-cache-v2-

  save-vercel-cache:
    description: "Save Vercel build cache"
    steps:
      - save_cache:
          name: Save Vercel Cache
          key: vercel-cache-v2-{{ .Branch }}-{{ checksum "pnpm-lock.yaml" }}
          paths:
            - .vercel
            - .next/cache
            - apps/web/.next/cache

  setup:
    description: "Common setup steps for all jobs"
    steps:
      - restore_cache:
          name: Restore pnpm Package Cache
          keys:
            - pnpm-packages-{{ checksum "pnpm-lock.yaml" }}
      - run:
          name: Install pnpm package manager
          command: |
            npm install --global corepack@latest
            corepack enable
            corepack prepare pnpm@latest-10 --activate
            pnpm config set store-dir ~/.pnpm-store
      - run:
          name: Install Dependencies
          command: |
            pnpm install
      - save_cache:
          name: Save pnpm Package Cache
          key: pnpm-packages-{{ checksum "pnpm-lock.yaml" }}
          paths:
            - ~/.pnpm-store

jobs:
  check:
    docker:
      - image: mcr.microsoft.com/playwright:v1.53.0-noble
    resource_class: large
    steps:
      - checkout
      - setup
      - setup-nx
      - restore-nx-cache
      - run:
          name: Run affected tasks
          command: pnpm exec nx affected --base=$NX_BASE --head=$NX_HEAD -t lint:ci,typecheck
      - save-nx-cache

  test:
    docker:
      - image: mcr.microsoft.com/playwright:v1.53.0-noble
    resource_class: large
    steps:
      - checkout
      - setup
      - setup-nx
      - restore-nx-cache
      - run:
          name: Run affected tasks
          command: SHARD="$((${CIRCLE_NODE_INDEX}+1))"; pnpm exec nx affected --base=$NX_BASE --head=$NX_HEAD -t test -- --shard=${SHARD}/${CIRCLE_NODE_TOTAL}
      - save-nx-cache
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
          destination: playwright-results

  chromatic:
    docker:
      - image: cimg/node:lts
    resource_class: medium
    environment:
      CI: true
    steps:
      - checkout
      - setup
      - setup-nx
      - restore-nx-cache
      - run:
          name: Build Storybook for Chromatic
          command: pnpm exec nx build-storybook ui --stats-json=storybook-static
      - run:
          name: Run Chromatic
          command: cd libs/ui && npx chromatic
      - save-nx-cache

  deploy-preview:
    docker:
      - image: cimg/node:lts
    resource_class: medium
    steps:
      - checkout
      - setup
      - restore-vercel-cache
      - run:
          name: Pull Vercel Environment Information
          command: npx vercel@latest pull --yes --environment=preview --token=$VERCEL_TOKEN
      - run:
          name: Build Project
          command: npx vercel@latest build --token=$VERCEL_TOKEN
      - run:
          name: Deploy Project Artifacts to Vercel
          command: |
            VERCEL_URL=$(npx vercel@latest deploy --token=$VERCEL_TOKEN)

            if [[ ! "$VERCEL_URL" =~ ^https?:// ]]; then
              echo "Invalid Vercel URL received: $VERCEL_URL"
              exit 1
            fi

            echo "Deployed to: $VERCEL_URL"
            echo "export VERCEL_URL=$VERCEL_URL" >> $BASH_ENV
      - run:
          name: Install required tools
          command: sudo apt-get update && sudo apt-get install -y jq

      - run:
          name: Create GitHub Deployment & Status
          command: |
            set -e

            if [ -z "$GITHUB_TOKEN" ]; then
              echo "‚ö†Ô∏è  GITHUB_TOKEN not set, skipping GitHub integration"
              exit 0
            fi

            if [ -z "$VERCEL_URL" ]; then
              echo "‚ùå VERCEL_URL not set, cannot create deployment"
              exit 1
            fi

            if [[ ! "$VERCEL_URL" =~ ^https?:// ]]; then
              echo "‚ùå Invalid Vercel URL format: $VERCEL_URL"
              exit 1
            fi

            REPO_OWNER="darklakefi"
            REPO_NAME="dex-web"
            COMMIT_SHA="$CIRCLE_SHA1"

            echo "üöÄ Creating GitHub deployment for commit: $COMMIT_SHA"
            echo "üìÅ Repository: $REPO_OWNER/$REPO_NAME"
            echo "üîó Preview URL: $VERCEL_URL"

            DEPLOYMENT_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/deployments \
              -d '{
                "ref": "'$COMMIT_SHA'",
                "environment": "preview",
                "auto_merge": false,
                "required_contexts": []
              }')

            HTTP_STATUS=$(echo $DEPLOYMENT_RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
            DEPLOYMENT_BODY=$(echo $DEPLOYMENT_RESPONSE | sed -e 's/HTTPSTATUS:.*//g')

            if [ "$HTTP_STATUS" -ne 201 ]; then
              echo "‚ùå Failed to create deployment. HTTP Status: $HTTP_STATUS"
              echo "Response: $DEPLOYMENT_BODY"
              exit 1
            fi

            DEPLOYMENT_ID=$(echo $DEPLOYMENT_BODY | jq -r '.id')
            echo "‚úÖ Deployment created (ID: $DEPLOYMENT_ID)"

            STATUS_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/deployments/$DEPLOYMENT_ID/statuses \
              -d '{
                "state": "success",
                "environment_url": "'$VERCEL_URL'",
                "description": "Preview deployment ready"
              }')

            STATUS_HTTP=$(echo $STATUS_RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

            if [ "$STATUS_HTTP" -ne 201 ]; then
              echo "‚ö†Ô∏è  Failed to update deployment status. HTTP Status: $STATUS_HTTP"
              echo "Response: $(echo $STATUS_RESPONSE | sed -e 's/HTTPSTATUS:.*//g')"
            else
              echo "‚úÖ Deployment status updated"
            fi

            CHECK_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/statuses/$COMMIT_SHA \
              -d '{
                "state": "success",
                "target_url": "'$VERCEL_URL'",
                "description": "Preview ready",
                "context": "deploy/preview"
              }')

            CHECK_HTTP=$(echo $CHECK_RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

            if [ "$CHECK_HTTP" -ne 201 ]; then
              echo "‚ö†Ô∏è  Failed to create status check. HTTP Status: $CHECK_HTTP"
              echo "Response: $(echo $CHECK_RESPONSE | sed -e 's/HTTPSTATUS:.*//g')"
            else
              echo "‚úÖ Status check created for deploy/preview context"
            fi

            echo "üéâ GitHub integration completed successfully!"

  deploy-production:
    docker:
      - image: cimg/node:lts
    resource_class: medium
    steps:
      - checkout
      - setup
      - restore-vercel-cache
      - run:
          name: Plan production deployment
          command: circleci run release plan --target-version=production-$CIRCLE_SHA1 --environment-name=production --component-name=dex-web
      - run:
          name: Update deployment status to running
          command: circleci run release update --status=running
      - run:
          name: Pull Vercel Environment Information
          command: npx vercel@latest pull --yes --environment=production --token=$VERCEL_TOKEN
      - run:
          name: Build Project
          command: npx vercel@latest build --prod --token=$VERCEL_TOKEN
      - run:
          name: Deploy Project Artifacts to Vercel
          command: npx vercel@latest deploy --prod --token=$VERCEL_TOKEN
      - run:
          name: Create GitHub Production Deployment
          command: |
            if [ -n "$GITHUB_TOKEN" ]; then
              curl -s -X POST \
                -H "Authorization: token $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/deployments \
                -d '{
                  "ref": "'$CIRCLE_SHA1'",
                  "environment": "production",
                  "auto_merge": false,
                  "required_contexts": []
                }' | jq -r '.id' | xargs -I {} curl -s -X POST \
                -H "Authorization: token $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/deployments/{}/statuses \
                -d '{"state": "success", "description": "Production deployment successful"}'
            fi
      - run:
          name: Update deployment status to SUCCESS
          command: circleci run release update --status=SUCCESS
          when: on_success
      - run:
          name: Update deployment status to FAILED
          command: circleci run release update --status=FAILED
          when: on_fail
      - save-vercel-cache

workflows:
  ci-cd:
    jobs:
      - check
      - test
      - chromatic
      - deploy-preview:
          requires:
            - test
          filters:
            branches:
              ignore: /main/
      - deploy-production:
          requires:
            - test
          filters:
            branches:
              only: /main/
