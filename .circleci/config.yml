version: 2.1

orbs:
  nx: nrwl/nx@1.7.0

commands:
  restore-nx-cache:
    description: "Restore Nx cache with enhanced fallback"
    steps:
      - restore_cache:
          name: Restore Nx Cache
          keys:
            - nx-cache-v3-{{ .Branch }}-{{ .Revision }}
            - nx-cache-v3-{{ .Branch }}-
            - nx-cache-v3-
      - run:
          name: Fix Nx cache permissions
          command: |
            sudo chown -R $(id -u):$(id -g) .nx/cache

  setup-nx:
    description: "Set up Nx SHAs for affected detection"
    steps:
      - nx/set-shas:
          main-branch-name: "develop"

  save-nx-cache:
    description: "Save Nx cache with revision-specific key"
    steps:
      - save_cache:
          name: Save Nx Cache
          key: nx-cache-v2-{{ .Branch }}-{{ .Revision }}
          paths:
            - .nx/cache

  restore-vercel-cache:
    description: "Restore Vercel build cache"
    steps:
      - restore_cache:
          name: Restore Vercel Cache
          keys:
            - vercel-cache-v2-{{ .Branch }}-{{ checksum "pnpm-lock.yaml" }}
            - vercel-cache-v2-{{ .Branch }}-
            - vercel-cache-v2-

  save-vercel-cache:
    description: "Save Vercel build cache"
    steps:
      - save_cache:
          name: Save Vercel Cache
          key: vercel-cache-v2-{{ .Branch }}-{{ checksum "pnpm-lock.yaml" }}
          paths:
            - .vercel
            - apps/web/.next/cache

  setup-pnpm:
    description: "Install pnpm package manager"
    steps:
      - run:
          name: Install pnpm package manager
          command: |
            corepack enable
            corepack prepare pnpm@latest-10 --activate
            pnpm config set store-dir ~/.pnpm-store

.job_defaults: &job_defaults
  docker:
    - image: mcr.microsoft.com/playwright:v1.53.0-noble
  resource_class: large

jobs:
  install_dependencies:
    <<: *job_defaults
    steps:
      - checkout
      - restore_cache:
          name: Restore pnpm Package Cache
          keys:
            - pnpm-packages-{{ checksum "pnpm-lock.yaml" }}
      - setup-pnpm
      - run:
          name: Install Dependencies
          command: pnpm install --frozen-lockfile
      - save_cache:
          name: Save pnpm Package Cache
          key: pnpm-packages-{{ checksum "pnpm-lock.yaml" }}
          paths:
            - ~/.pnpm-store
      - persist_to_workspace:
          root: .
          paths:
            - .

  check:
    <<: *job_defaults
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          name: Restore pnpm Package Cache
          keys:
            - pnpm-packages-{{ checksum "pnpm-lock.yaml" }}
      - setup-pnpm
      - setup-nx
      - restore-nx-cache
      - run:
          name: Run affected tasks
          command: pnpm exec nx affected --base=$NX_BASE --head=$NX_HEAD -t lint:ci,typecheck
      - save-nx-cache

  test:
    <<: *job_defaults
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          name: Restore pnpm Package Cache
          keys:
            - pnpm-packages-{{ checksum "pnpm-lock.yaml" }}
      - setup-pnpm
      - setup-nx
      - restore-nx-cache
      - run:
          name: Run affected tasks
          command: SHARD="$((${CIRCLE_NODE_INDEX}+1))"; pnpm exec nx affected --base=$NX_BASE --head=$NX_HEAD -t test -- --shard=${SHARD}/${CIRCLE_NODE_TOTAL}
      - save-nx-cache
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
          destination: playwright-results

  chromatic:
    docker:
      - image: cimg/node:lts
    resource_class: medium
    environment:
      CI: true
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          name: Restore pnpm Package Cache
          keys:
            - pnpm-packages-{{ checksum "pnpm-lock.yaml" }}
      - setup-pnpm
      - setup-nx
      - restore-nx-cache
      - run:
          name: Build Storybook for Chromatic
          command: pnpm exec nx build-storybook ui --stats-json=storybook-static
      - run:
          name: Run Chromatic
          command: cd libs/ui && npx chromatic
      - save-nx-cache

  deploy-preview:
    docker:
      - image: cimg/node:lts
    resource_class: medium
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          name: Restore pnpm Package Cache
          keys:
            - pnpm-packages-{{ checksum "pnpm-lock.yaml" }}
      - setup-pnpm
      - restore-vercel-cache
      - run:
          name: Pull Vercel Environment Information
          command: npx vercel@34 pull --yes --environment=preview --token=$VERCEL_TOKEN
      - run:
          name: Build Project
          command: npx vercel@34 build --token=$VERCEL_TOKEN
      - run:
          name: Deploy Project Artifacts to Vercel
          command: |
            VERCEL_URL=$(npx vercel@34 deploy --token=$VERCEL_TOKEN)

            if [[ ! "$VERCEL_URL" =~ ^https?:// ]]; then
              echo "Invalid Vercel URL received: $VERCEL_URL"
              exit 1
            fi

            echo "Deployed to: $VERCEL_URL"
            echo "export VERCEL_URL=$VERCEL_URL" >> $BASH_ENV
      - run:
          name: Install required tools
          command: sudo apt-get update && sudo apt-get install -y jq
      - run:
          name: Create GitHub Deployment & Status
          command: |
            chmod +x scripts/create-github-deployment.sh
            ./scripts/create-github-deployment.sh

  deploy-production:
    docker:
      - image: cimg/node:lts
    resource_class: medium
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          name: Restore pnpm Package Cache
          keys:
            - pnpm-packages-{{ checksum "pnpm-lock.yaml" }}
      - setup-pnpm
      - restore-vercel-cache
      - run:
          name: Plan production deployment
          command: circleci run release plan --target-version=production-$CIRCLE_SHA1 --environment-name=production --component-name=dex-web
      - run:
          name: Update deployment status to running
          command: circleci run release update --status=running
      - run:
          name: Pull Vercel Environment Information
          command: npx vercel@34 pull --yes --environment=production --token=$VERCEL_TOKEN
      - run:
          name: Build Project
          command: npx vercel@34 build --prod --token=$VERCEL_TOKEN
      - run:
          name: Deploy Project Artifacts to Vercel
          command: npx vercel@34 deploy --prod --token=$VERCEL_TOKEN
      - run:
          name: Create GitHub Production Deployment
          command: |
            chmod +x scripts/create-github-production-deployment.sh
            ./scripts/create-github-production-deployment.sh
      - run:
          name: Update deployment status to SUCCESS
          command: circleci run release update --status=SUCCESS
          when: on_success
      - run:
          name: Update deployment status to FAILED
          command: circleci run release update --status=FAILED
          when: on_fail
      - save-vercel-cache

workflows:
  ci-cd:
    jobs:
      - install_dependencies
      - check:
          requires:
            - install_dependencies
      - test:
          requires:
            - install_dependencies
      - chromatic:
          requires:
            - install_dependencies
      - deploy-preview:
          requires:
            - test
            - check
            - chromatic
          filters:
            branches:
              ignore: /main/
      - deploy-production:
          requires:
            - test
            - check
            - chromatic
          filters:
            branches:
              only: /main/
