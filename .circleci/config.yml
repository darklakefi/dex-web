version: 2.1

parameters:
  create_release_pr:
    type: boolean
    default: false

orbs:
  nx: nrwl/nx@1.7.0
  node: circleci/node@7.1.0
  github-cli: circleci/github-cli@2.7.1

commands:

  restore-vercel-cache:
    description: "Restore Vercel build cache"
    steps:
      - restore_cache:
          name: Restore Vercel Cache
          keys:
            - vercel-cache-v1-{{ checksum "pnpm-lock.yaml" }}-{{ checksum "apps/web/next.config.ts" }}
            - vercel-cache-v1-{{ checksum "pnpm-lock.yaml" }}
            - vercel-cache-v1-

  save-vercel-cache:
    description: "Save Vercel build cache"
    steps:
      - save_cache:
          name: Save Vercel Cache
          key: vercel-cache-v1-{{ checksum "pnpm-lock.yaml" }}-{{ checksum "apps/web/next.config.ts" }}
          paths:
            - .vercel
            - .next/cache

  setup:
    description: "Common setup steps for all jobs"
    steps:
      - node/install-pnpm:
          version: 10.12.4

      - node/install-packages:
          pkg-manager: pnpm
          cache-path: "~/.pnpm-store"
          with-cache: true

jobs:
  main:
    docker:
      - image: cimg/node:24.3.0
    resource_class: large
    steps:
      - checkout
      - run:
          name: Start Nx Cloud CI run with task distribution
          command: npx nx-cloud start-ci-run --distribute-on="8 linux-medium-js" --stop-agents-after="e2e" --require-explicit-completion
      - setup
      - nx/set-shas:
          main-branch-name: develop
      - run:
          name: Run affected tasks
          command: |
            npx nx-cloud record -- pnpm exec nx affected -t lint:ci,typecheck,test,build
      - run:
          name: Run E2E tests
          command: |
            if pnpm exec nx show projects --affected --with-target=e2e | grep -q .; then
              npx nx-cloud record -- pnpm exec nx affected -t e2e
            else
              echo "✅ No affected projects with e2e tests found, skipping"
            fi
      - run:
          name: Fix CI failures
          command: npx nx-cloud fix-ci
          when: always
      - store_test_results:
          path: test-results
      - store_test_results:
          path: dist/apps/web-e2e/junit.xml
      - store_artifacts:
          path: test-results
          destination: junit
      - store_artifacts:
          path: dist/apps/web-e2e/html-report
          destination: playwright-report

  chromatic:
    docker:
      - image: cimg/node:24.3.0
    resource_class: medium
    environment:
      CI: true
    steps:
      - checkout
      - setup
      - nx/set-shas:
          main-branch-name: develop
      - run:
          name: Run Chromatic
          command: cd libs/ui && npx chromatic

  deploy-preview:
    docker:
      - image: cimg/node:24.3.0
    resource_class: large
    steps:
      - checkout
      - setup
      - restore-vercel-cache
      - run:
          name: Pull Vercel Environment Information
          command: npx vercel@latest pull --yes --environment=preview --token=$VERCEL_TOKEN
      - run:
          name: Build Project
          command: npx vercel@latest build --token=$VERCEL_TOKEN
      - run:
          name: Deploy Project Artifacts to Vercel
          command: |
            VERCEL_URL=$(npx vercel@latest deploy --token=$VERCEL_TOKEN)
            if [[ ! "$VERCEL_URL" =~ ^https?:// ]]; then
              echo "Invalid Vercel URL received: $VERCEL_URL"
              exit 1
            fi
            echo "export VERCEL_URL=$VERCEL_URL" >> $BASH_ENV
      - github-cli/install
      - run:
          name: Create GitHub Deployment
          command: |
            source $BASH_ENV
            if [ -n "$GITHUB_TOKEN" ]; then
              DEPLOYMENT_JSON='{
                "ref": "'${CIRCLE_SHA1}'",
                "environment": "preview",
                "description": "Preview deployment for '${CIRCLE_SHA1:0:7}'",
                "required_contexts": []
              }'

              DEPLOYMENT_ID=$(echo "$DEPLOYMENT_JSON" | gh api repos/{owner}/{repo}/deployments \
                --method POST \
                --input - \
                --jq '.id')

              gh api repos/{owner}/{repo}/deployments/${DEPLOYMENT_ID}/statuses \
                --method POST \
                -f state="success" \
                -f environment_url="${VERCEL_URL}" \
                -f description="Preview deployment ready" \
                -f log_url="${CIRCLE_BUILD_URL}"

              gh api repos/{owner}/{repo}/statuses/${CIRCLE_SHA1} \
                --method POST \
                -f state="success" \
                -f target_url="${VERCEL_URL}" \
                -f description="Preview ready" \
                -f context="deploy/preview"

              echo "✅ GitHub deployment created: ${VERCEL_URL}"
            else
              echo "⚠️ GITHUB_TOKEN not set, skipping GitHub integration"
            fi

  deploy-production:
    docker:
      - image: cimg/node:24.3.0
    resource_class: medium
    steps:
      - checkout
      - setup
      - restore-vercel-cache
      - run:
          name: Plan production deployment
          command: |
            if ! circleci run release plan --target-version=production-$CIRCLE_SHA1 --environment-name=production --component-name=dex-web; then
              echo "Failed to plan release"
              exit 1
            fi
      - run:
          name: Update deployment status to running
          command: |
            if ! circleci run release update --status=running; then
              echo "Failed to update deployment status to running"
              exit 1
            fi
      - run:
          name: Pull Vercel Environment Information
          command: npx vercel@latest pull --yes --environment=production --token=$VERCEL_TOKEN
      - run:
          name: Build Project
          command: npx vercel@latest build --prod --token=$VERCEL_TOKEN
      - run:
          name: Deploy Project Artifacts to Vercel
          command: |
            PRODUCTION_URL=$(npx vercel@latest deploy --prod --token=$VERCEL_TOKEN)
            echo "export PRODUCTION_URL=$PRODUCTION_URL" >> $BASH_ENV
      - github-cli/install
      - run:
          name: Create GitHub Production Deployment
          command: |
            source $BASH_ENV
            if [ -n "$GITHUB_TOKEN" ]; then
              DEPLOYMENT_JSON='{
                "ref": "'${CIRCLE_SHA1}'",
                "environment": "production",
                "description": "Production deployment '${CIRCLE_TAG:-${CIRCLE_SHA1:0:7}}'",
                "production_environment": true,
                "required_contexts": []
              }'

              DEPLOYMENT_ID=$(echo "$DEPLOYMENT_JSON" | gh api repos/{owner}/{repo}/deployments \
                --method POST \
                --input - \
                --jq '.id')

              gh api repos/{owner}/{repo}/deployments/${DEPLOYMENT_ID}/statuses \
                --method POST \
                -f state="success" \
                -f environment_url="${PRODUCTION_URL:-https://darklake.fi}" \
                -f description="Production deployment successful" \
                -f log_url="${CIRCLE_BUILD_URL}"

              gh api repos/{owner}/{repo}/statuses/${CIRCLE_SHA1} \
                --method POST \
                -f state="success" \
                -f target_url="${PRODUCTION_URL:-https://darklake.fi}" \
                -f description="Deployed to production" \
                -f context="deploy/production"

              echo "✅ GitHub production deployment created: ${PRODUCTION_URL:-https://darklake.fi}"
            else
              echo "⚠️ GITHUB_TOKEN not set, skipping GitHub integration"
            fi
      - run:
          name: Update deployment status to SUCCESS
          command: circleci run release update --status=SUCCESS
          when: on_success
      - run:
          name: Update deployment status to FAILED
          command: circleci run release update --status=FAILED
          when: on_fail
      - save-vercel-cache

  create_release_pull_request:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - github-cli/install
      - run:
          name: Create Release Pull Request
          command: |
            REVIEWERS="darklakefi/release"
            gh auth login --with-token <<< "$GITHUB_TOKEN"
            EXISTING_PR=$(gh pr list --base main --head develop --json number -q '.[0].number')
            if [ -n "$EXISTING_PR" ]; then
              echo "Pull request from develop to main already exists: #$EXISTING_PR"
              exit 0
            fi
            git fetch origin main
            git fetch origin develop
            CHANGELOG=$(git log origin/main..origin/develop --oneline --pretty=format:'- %s (%h)' --no-merges)
            if [ -z "$CHANGELOG" ]; then
              echo "No changes between develop and main. No PR created."
              exit 0
            fi
            PR_BODY=$(cat <<EOF
            Automated release pull request.
            ## Changes
            $CHANGELOG
            EOF
            )
            gh pr create \
              --base "main" \
              --head "develop" \
              --title "chore(release): Sync develop to main" \
              --body "$PR_BODY" \
              --reviewer "$REVIEWERS"

workflows:
  ci-cd:
    jobs:
      - main:
          context:
            - darklakefi-development
      - chromatic:
          requires:
            - main
      - deploy-preview:
          context:
            - darklakefi-deployments
            - darklakefi-development
          requires:
            - main
          filters:
            branches:
              ignore: /main/
      - deploy-production:
          context:
            - darklakefi-deployments
            - darklakefi-production
          requires:
            - main
          filters:
            branches:
              only: /main/

  release-pr:
    when: << pipeline.parameters.create_release_pr >>
    jobs:
      - create_release_pull_request:
          context:
            - darklakefi-deployments
