version: 2.1

orbs:
  nx: nrwl/nx@1.7.0
  node: circleci/node@7.1.0

commands:
  restore-nx-cache:
    description: "Restore Nx cache with enhanced fallback"
    steps:
      - restore_cache:
          name: Restore Nx Cache
          keys:
            - nx-cache-{{ .Branch }}-{{ .Revision }}-{{ checksum "nx.json" }}-{{ checksum "package.json" }}
            - nx-cache-{{ .Branch }}-{{ checksum "nx.json" }}-{{ checksum "package.json" }}
            - nx-cache-{{ .Branch }}-{{ checksum "nx.json" }}
            - nx-cache-{{ .Branch }}-
            - nx-cache-

  setup-nx:
    description: "Set up Nx SHAs for affected detection"
    steps:
      - nx/set-shas:
          main-branch-name: "develop"

  save-nx-cache:
    description: "Save Nx cache with revision-specific key"
    steps:
      - save_cache:
          name: Save Nx Cache
          key: nx-cache-{{ .Branch }}-{{ .Revision }}-{{ checksum "nx.json" }}-{{ checksum "package.json" }}
          paths:
            - .nx/cache
            - node_modules/.cache/nx

  restore-vercel-cache:
    description: "Restore Vercel build cache"
    steps:
      - restore_cache:
          name: Restore Vercel Cache
          keys:
            - vercel-cache-{{ .Branch }}-{{ checksum "pnpm-lock.yaml" }}-{{ checksum "apps/web/next.config.ts" }}
            - vercel-cache-{{ .Branch }}-{{ checksum "pnpm-lock.yaml" }}
            - vercel-cache-{{ .Branch }}-

  save-vercel-cache:
    description: "Save Vercel build cache"
    steps:
      - save_cache:
          name: Save Vercel Cache
          key: vercel-cache-{{ .Branch }}-{{ checksum "pnpm-lock.yaml" }}-{{ checksum "apps/web/next.config.ts" }}
          paths:
            - .vercel
            - .next/cache

  setup:
    description: "Common setup steps for all jobs"
    steps:
      - node/install:
          install-pnpm: true
          pnpm-version: 10.12.4

      - node/install-packages:
          pkg-manager: pnpm
          cache-path: ~/.pnpm-store

      - persist_to_workspace:
          root: .
          paths:
            - node_modules
            - .pnpm-store

jobs:
  setup:
    docker:
      - image: cimg/node:24.3.0
    resource_class: medium
    steps:
      - checkout
      - setup

  check:
    docker:
      - image: cimg/node:24.3.0
    resource_class: medium
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup-nx
      - restore-nx-cache
      - run:
          name: Run affected tasks
          command: pnpm exec nx affected --base=$NX_BASE --head=$NX_HEAD -t lint:ci,typecheck
      - save-nx-cache

  test:
    docker:
      - image: cimg/node:24.3.0
    resource_class: large
    parallelism: 4
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup-nx
      - restore-nx-cache
      - run:
          name: Run affected tests in parallel
          command: |
            pnpm exec nx affected --base=$NX_BASE --head=$NX_HEAD \
              --target=test --parallel --maxParallel=${CIRCLE_NODE_TOTAL}
      - save-nx-cache
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
          destination: junit

  e2e:
    docker:
      - image: mcr.microsoft.com/playwright:v1.53.1-noble
    resource_class: large
    parallelism: 2
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup-nx
      - restore-nx-cache
      - run:
          name: Run affected e2e tests
          command: |
            pnpm exec nx affected --base=$NX_BASE --head=$NX_HEAD --target=e2e --parallel --max-parallel=2
      - save-nx-cache
      - store_test_results:
          path: dist/apps/web-e2e/junit.xml
      - store_artifacts:
          path: dist/apps/web-e2e/html-report
          destination: playwright-report

  chromatic:
    docker:
      - image: cimg/node:24.3.0
    resource_class: medium
    environment:
      CI: true
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup-nx
      - restore-nx-cache
      - run:
          name: Run Chromatic
          command: cd libs/ui && npx chromatic
      - save-nx-cache

  deploy-preview:
    docker:
      - image: cimg/node:24.3.0
    resource_class: large
    steps:
      - checkout
      - setup
      - restore-vercel-cache
      - run:
          name: Pull Vercel Environment Information
          command: npx vercel@latest pull --yes --environment=preview --token=$VERCEL_TOKEN
      - run:
          name: Build Project
          command: npx vercel@latest build --token=$VERCEL_TOKEN
      - run:
          name: Deploy Project Artifacts to Vercel
          command: |
            VERCEL_URL=$(npx vercel@latest deploy --token=$VERCEL_TOKEN)
            if [[ ! "$VERCEL_URL" =~ ^https?:// ]]; then
              echo "Invalid Vercel URL received: $VERCEL_URL"
              exit 1
            fi
            echo "export VERCEL_URL=$VERCEL_URL" >> $BASH_ENV
      - run:
          name: Create GitHub Deployment & Status
          command: .circleci/scripts/github-deployment.sh

  deploy-production:
    docker:
      - image: cimg/node:24.3.0
    resource_class: medium
    steps:
      - checkout
      - setup
      - restore-vercel-cache
      - run:
          name: Plan production deployment
          command: circleci run release plan --target-version=production-$CIRCLE_SHA1 --environment-name=production --component-name=dex-web
      - run:
          name: Update deployment status to running
          command: circleci run release update --status=running
      - run:
          name: Pull Vercel Environment Information
          command: npx vercel@latest pull --yes --environment=production --token=$VERCEL_TOKEN
      - run:
          name: Build Project
          command: npx vercel@latest build --prod --token=$VERCEL_TOKEN
      - run:
          name: Deploy Project Artifacts to Vercel
          command: npx vercel@latest deploy --prod --token=$VERCEL_TOKEN
      - run:
          name: Create GitHub Production Deployment
          command: |
            if [ -n "$GITHUB_TOKEN" ]; then
              curl -s -X POST \
                -H "Authorization: token $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/deployments \
                -d '{
                  "ref": "'$CIRCLE_SHA1'",
                  "environment": "production",
                  "auto_merge": false,
                  "required_contexts": []
                }' | jq -r '.id' | xargs -I {} curl -s -X POST \
                -H "Authorization: token $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/deployments/{}/statuses \
                -d '{"state": "success", "description": "Production deployment successful"}'
            fi
      - run:
          name: Update deployment status to SUCCESS
          command: circleci run release update --status=SUCCESS
          when: on_success
      - run:
          name: Update deployment status to FAILED
          command: circleci run release update --status=FAILED
          when: on_fail
      - save-vercel-cache

workflows:
  ci-cd:
    jobs:
      - setup
      - check:
          requires:
            - setup
      - test:
          requires:
            - setup
      - chromatic:
          requires:
            - check
            - test
      - e2e:
          requires:
            - chromatic
      - deploy-preview:
          context: darklakefi-deployments
          requires:
            - check
            - test
          filters:
            branches:
              ignore: /main/
      - deploy-production:
          context: darklakefi-deployments
          requires:
            - check
            - test
            - e2e
            - chromatic
          filters:
            branches:
              only: /main/
